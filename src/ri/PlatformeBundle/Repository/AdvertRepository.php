<?php

namespace ri\PlatformeBundle\Repository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;



/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAdvertWithApplications($page, $nbPerPage)
	{
      $qb=$this
      ->createQueryBuilder('a')
      ->leftjoin('a.image','i')
      ->addSelect('i')
      ->leftjoin('a.categories','c')
      ->addSelect('c')
      ->orderBy('a.date', 'DESC')
      ->getquery()
      ;
       $qb
      // On définit l'annonce à partir de laquelle commencer la liste
      ->setFirstResult(($page-1) * $nbPerPage)
      // Ainsi que le nombre d'annonce à afficher sur une page
      ->setMaxResults($nbPerPage)
    ;

    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
    // (n'oubliez pas le use correspondant en début de fichier)
    return new Paginator($qb, true);
      
	}
   
   public function getAdvertsMenu($limit)
	{
      $qb=$this
      ->createQueryBuilder('a')
      ->leftjoin('a.applications','app')
      ->addSelect('app')
    ;
        $qb->setMaxResults($limit);

      return $qb
      ->getquery()
      ->getResult()
      ;
	}

	public function getAdvertWithApplication($id)
	{  
      $qb=$this
      ->createQueryBuilder('a')
      ->leftjoin('a.applications','app')
      ->addSelect('app')
    ; 
    $this->getAdvertWithApplicationsConditionId($qb, $id);
    return $qb
      ->getquery()
      ->getResult()
      ;
	}


	public function getAdvertWithApplicationsConditionId($qb , $id)
	{ 
     $qb
     ->andWhere('a.id=:id')
     ->setParameter('id',$id)
     ;
	}


	public function getAdvertWithcategory(array  $categoryNames)
	{

 	 $qb=$this
      ->createQueryBuilder('a')
      ->leftjoin('a.categories','c')
      ->addSelect('c')
    ;
        $qb->where($qb->expr()->in('c.name', $categoryNames));

      return $qb
      ->getquery()
      ->getResult()
      ;

	}

	public function getAdvertWithSkill($id)
	{

 $qb=$this
      ->createQueryBuilder('as')
      ->leftjoin('as.skill_id','s')
      ->addSelect('s')
      ;
$this->getSkill($qb, $id);
  return $qb
      ->getquery()
      ->getResult()
      ;

	}

public function getSkill($qb, $id)
{

$qb=$this
->andWhere('ads.advert_id=:id')
->setParameter('id',$id)
;
}


}
